. Program Structure
ebnf
Copy

program      → declList
declList     → declList decl | decl
decl         → varDecl | funDecl | recordDecl

2. Variable Declarations
ebnf
Copy

varDecl      → typeSpec varDeclList ;
varDeclList  → varDeclList "," varDeclInit | varDeclInit
varDeclInit  → varDeclId [ "=" exp ]  // Optional initializer
varDeclId    → ID | ID "[" NUMCONST "]"

3. Type Specifications
ebnf
Copy

typeSpec     → "int" | "bool" | "real" | "string" | "record"

4. Function Declarations
ebnf
Copy

funDecl      → typeSpec ID "(" parms ")" stmt
             | "void" ID "(" parms ")" stmt
parms        → parmList | ε
parmList     → parmList ";" parmTypeList | parmTypeList
parmTypeList → typeSpec parmIdList
parmIdList   → parmIdList "," parmId | parmId
parmId       → ID | ID "[" "]"

5. Statements
ebnf
Copy

stmt         → expStmt | compoundStmt | selectStmt | iterStmt | returnStmt
expStmt      → exp ";" | ";"
compoundStmt → "{" localDecls stmtList "}"
localDecls   → localDecls scopedVarDecl | ε
stmtList     → stmtList stmt | ε
selectStmt   → "if" "(" simpleExp ")" stmt
             | "if" "(" simpleExp ")" stmt "else" stmt
iterStmt     → "while" "(" simpleExp ")" stmt
             | "for" "(" expStmt simpleExp ";" expStmt ")" stmt
returnStmt   → "return" ";" | "return" exp ";"

6. Expressions
ebnf
Copy

exp          → mutable assignOp exp
             | mutable "++" | mutable "--"
             | simpleExp
assignOp     → "=" | "+=" | "-=" | "*=" | "/="

simpleExp    → simpleExp "||" andExp | andExp
andExp       → andExp "&&" unaryRelExp | unaryRelExp
unaryRelExp  → "!" unaryRelExp | relExp
relExp       → sumExp relOp sumExp | sumExp
relOp        → "<=" | "<" | ">" | ">=" | "==" | "!="
sumExp       → sumExp ("+" | "-") mulExp | mulExp
mulExp       → mulExp ("*" | "/" | "%") powerExp | powerExp  // Added powerExp
powerExp     → powerExp "^" unaryExp | unaryExp  // Exponentiation
unaryExp     → ("-" | "~" | "?") unaryExp | factor  // ~ is reserved for future use
factor       → immutable | mutable

7. Mutable/Immutable Values
ebnf
Copy

mutable      → ID | ID "[" exp "]"
immutable    → "(" exp ")" | call | constant
call         → ID "(" args ")"
args         → argList | ε
argList      → argList "," exp | exp
constant     → NUMCONST | REALLTR | STRLTR | "true" | "false"

8. Record Declaration
ebnf
Copy

recordDecl   → "record" ID "{" fieldDecls "}" ";"
fieldDecls   → fieldDecls fieldDecl | ε
fieldDecl    → typeSpec ID ";"

9. Open Ternary Operations

When you add ternary operations (? :), you can update the grammar as follows:
ebnf
Copy

exp          → mutable assignOp exp
             | mutable "++" | mutable "--"
             | ternaryExp  // Added ternaryExp
ternaryExp   → simpleExp "?" exp ":" exp  // Ternary operation
             | simpleExp